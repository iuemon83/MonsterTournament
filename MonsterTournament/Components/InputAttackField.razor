@using System.Text.RegularExpressions
@using MonsterTournament.Models
@using System.IO.Compression
@using System.Text.Json
@inject IJSRuntime JS

<MudPaper Class="ma-1 pa-2">
    <MudText>@("攻撃" + (@i + 1))</MudText>
    <MudContainer>
        <MudGrid Justify="Justify.FlexStart">
            <MudItem xs="12" lg="2">
                <MudSelect T="BattleCardAttackType" Label="種類" AnchorOrigin="Origin.BottomCenter" FullWidth="false"
                           @bind-Value=battleCardAttack.Type>
                    @foreach (var t in Enum.GetValues<BattleCardAttackType>())
                    {
                        <MudSelectItem Value="@t">
                            <AttackIcon AttackType="@t" />
                            @t.ToDisplayString()
                        </MudSelectItem>
                    }
                </MudSelect>
            </MudItem>

            @if (requireName)
            {
                @switch (battleCardAttack.Type)
                {
                    case BattleCardAttackType.Transform:
                    case BattleCardAttackType.Special:
                        break;

                    default:
                        <MudItem xs="12" lg="5">
                            <MudTextField T="string" Label="名前" Required="true"
                                          @bind-Value=battleCardAttack.Name />
                        </MudItem>
                        break;
                }
            }

            <MudItem xs="12" lg="5">
                @switch (battleCardAttack.Type)
                {
                    case BattleCardAttackType.Attack:
                    case BattleCardAttackType.ReAttack:
                        <div class="d-flex justify-start align-center gap-1">
                            <MudSelect T="AttackTarget" Label="ターゲット" AnchorOrigin="Origin.BottomCenter" FullWidth="false"
                                       @bind-Value=battleCardAttack.Target>
                                @foreach (var t in Enum.GetValues<AttackTarget>())
                                {
                                    <MudSelectItem Value="@t">
                                        @t.ToDisplayString()
                                    </MudSelectItem>
                                }
                            </MudSelect>
                            <MudNumericField Label="威力" Variant="Variant.Text" Min="0"
                                             @bind-Value=battleCardAttack.IntValue />
                        </div>
                        break;
                    case BattleCardAttackType.Heal:
                        <div class="d-flex justify-start align-center gap-1">
                            <MudSelect T="AttackTarget" Label="ターゲット" AnchorOrigin="Origin.BottomCenter" FullWidth="false"
                                       @bind-Value=battleCardAttack.Target>
                                @foreach (var t in Enum.GetValues<AttackTarget>())
                                {
                                    <MudSelectItem Value="@t">
                                        @t.ToDisplayString()
                                    </MudSelectItem>
                                }
                            </MudSelect>
                            <MudNumericField Label="回復量" Variant="Variant.Text" Min="0"
                                             @bind-Value=battleCardAttack.IntValue />
                        </div>
                        break;
                    case BattleCardAttackType.Buff:
                        <div class="d-flex justify-start align-center gap-1">
                            <MudSelect T="AttackTarget" Label="ターゲット" AnchorOrigin="Origin.BottomCenter" FullWidth="false"
                                       @bind-Value=battleCardAttack.Target>
                                @foreach (var t in Enum.GetValues<AttackTarget>())
                                {
                                    <MudSelectItem Value="@t">
                                        @t.ToDisplayString()
                                    </MudSelectItem>
                                }
                            </MudSelect>
                            <MudNumericField Label="上昇量" Variant="Variant.Text"
                                             @bind-Value=battleCardAttack.IntValue />
                        </div>
                        break;
                    case BattleCardAttackType.BattleState:
                        <div class="d-flex justify-start align-center gap-1">
                            <MudSelect T="AttackTarget" Label="ターゲット" AnchorOrigin="Origin.BottomCenter" FullWidth="false"
                                       @bind-Value=battleCardAttack.Target>
                                @foreach (var t in Enum.GetValues<AttackTarget>())
                                {
                                    <MudSelectItem Value="@t">
                                        @t.ToDisplayString()
                                    </MudSelectItem>
                                }
                            </MudSelect>
                            <MudSelect T="string" Label="状態異常" AnchorOrigin="Origin.BottomCenter" FullWidth="false"
                                       @bind-Value=battleCardAttack.Value>
                                @foreach (var t in BattleStateNames)
                                {
                                    <MudSelectItem Value="@t">
                                        @t
                                    </MudSelectItem>
                                }
                            </MudSelect>
                        </div>
                        break;
                    case BattleCardAttackType.Transform:
                        <MudSelect T="string" Label="変身先" AnchorOrigin="Origin.BottomCenter" FullWidth="false"
                                   @bind-Value=battleCardAttack.Value>
                            @foreach (var t in TransformNames)
                            {
                                <MudSelectItem Value="@t">
                                    @t
                                </MudSelectItem>
                            }
                        </MudSelect>
                        break;
                    case BattleCardAttackType.Special:
                        <MudSelect T="string" Label="必殺技" AnchorOrigin="Origin.BottomCenter" FullWidth="false"
                                   @bind-Value=battleCardAttack.Value>
                            @foreach (var t in SpecialAttackNames)
                            {
                                <MudSelectItem Value="@t">
                                    @t
                                </MudSelectItem>
                            }
                        </MudSelect>
                        break;
                    case BattleCardAttackType.Other:
                        <MudTextField T="string" Label="効果" Required="true"
                                      @bind-Value=battleCardAttack.Value />
                        break;
                    default:
                        @(battleCardAttack.Value = "")
                        break;
                }
            </MudItem>
        </MudGrid>
    </MudContainer>
</MudPaper>

@code {
    [Parameter]
    public BattleCardAttack battleCardAttack { get; set; } = new();

    [Parameter]
    public int i { get; set; }

    [Parameter]
    public bool requireName { get; set; } = true;

    [Parameter]
    public string[] TransformNames { get; set; } = [];

    [Parameter]
    public string[] BattleStateNames { get; set; } = [];

    [Parameter]
    public string[] SpecialAttackNames { get; set; } = [];
}