@using System.Text.RegularExpressions
@using MonsterTournament.Models
@using System.IO.Compression
@using System.Text.Json
@inject IJSRuntime JS

<MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">
    <MudTextField T="string" Class="mb-5" Label="名前" Required="true" @bind-Text=Monster.Name RequiredError="name is required!" />
    <MudNumericField Class="mb-5" Label="HP" Variant="Variant.Text" Min="0" @bind-Value=Monster.Hp />

    <MudFileUpload T="IBrowserFile" @ref=mudFileUpload FilesChanged="UploadImage" Accept=".png, .jpg, .gif">
        <ActivatorContent>
            <MudButton Variant="Variant.Filled"
                       Color="Color.Primary"
                       StartIcon="@Icons.Material.Filled.CloudUpload">
                画像
            </MudButton>
        </ActivatorContent>
    </MudFileUpload>

    <div Class="d-flex justify-center mb-5 gap-5">
        <MudPaper Outlined="true" Square="true"
                  Height=@($"{@Config.ImageSize.Y}rem") Width=@($"{@Config.ImageSize.X}rem")
                  Class="d-flex">
            @if (ImageBytes.Length > 0)
            {
                <MudImage id=@cardImageElementId ObjectFit="ObjectFit.Contain"
                          ObjectPosition="ObjectPosition.Center" Fluid="true" />
            }
            else
            {
                <MudText Style="height: 100%;width: 100%; align-content: center;" Align="Align.Center">画像</MudText>
            }
        </MudPaper>

        <MudTextField T="string" Label="フレーバーテキスト" Variant="Variant.Text" @bind-Text="@Monster.FlavorText" Lines="10" />
    </div>

    @foreach (var i in Enumerable.Range(0, Monster.Attacks.Length))
    {
        <InputAttackField i="@i" battleCardAttack=Monster.Attacks[i]
                          TransformNames="@TransformNames" BattleStateNames="@BattleStateNames" SpecialAttackNames="@SpecialAttackNames" />
    }
</MudForm>

<FileUploader @ref=fileUpload />

@code {
    [Parameter]
    public Monster Monster { get; set; } = Monster.Empty;

    [Parameter]
    public byte[] ImageBytes { get; set; } = [];

    [Parameter]
    public EventCallback<byte[]> ImageBytesChanged { get; set; }

    [Parameter]
    public string[] TransformNames { get; set; } = [];

    [Parameter]
    public string[] BattleStateNames { get; set; } = [];

    [Parameter]
    public string[] SpecialAttackNames { get; set; } = [];

#pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
    MudForm form;
    MudFileUpload<IBrowserFile> mudFileUpload;
    FileUploader fileUpload;
#pragma warning restore CS8618

    bool success;
    public bool Success => this.success;
    string[] errors = { };

    private readonly string cardImageElementId = Guid.NewGuid().ToString();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender && this.ImageBytes.Length != 0)
        {
            await this.UpdateImage(this.ImageBytes);
        }
    }

    public async Task UpdateImage(byte[] imageBytes)
    {
        ImageBytes = imageBytes;
        await ImageBytesChanged.InvokeAsync(imageBytes);

        await this.mudFileUpload.ClearAsync();

        StateHasChanged();
        await fileUpload.SetImage(cardImageElementId, new MemoryStream(imageBytes));
    }

    private async Task UploadImage(IBrowserFile? file)
    {
        Console.WriteLine("upload image");

        if (file == null)
        {
            Console.WriteLine("キャンセル");
            return;
        }

        Monster.ImageFileName = $"{Guid.NewGuid()}{Path.GetExtension(file.Name)}";

        var buffer = new byte[file.Size];
        using var fileStream = file.OpenReadStream(Config.MaxImageFileSizeInBytes);
        await fileStream.ReadAsync(buffer);
        await this.UpdateImage(buffer);
    }
}
