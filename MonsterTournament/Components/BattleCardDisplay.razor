@using System.IO.Compression
@using System.Text
@using System.Text.Json
@using MonsterTournament.Models
@inject IJSRuntime JS
@inject IDialogService DialogService

<MudPaper Outlined="true" Class="mb-5">
    <MudContainer Class="d-flex justify-center align-center gap-4 ma-2">
        <MudButton Disabled=!this.monster.cardLoaded Variant="Variant.Filled" Color="Color.Info" Size="Size.Large"
                   @onclick="Attack">攻撃</MudButton>

        <MudButtonGroup Color="Color.Primary" Variant="Variant.Outlined" OverrideStyles="false">
            @if (this.monster.Source.BattleStateAttached)
            {
                <MudButton Disabled=!this.monster.cardLoaded Variant="Variant.Outlined" Size="Size.Small" Color="Color.Warning"
                           @onclick="this.monster.Source.DettacheBattleState">
                    <AttackIcon AttackType="BattleCardAttackType.BattleState" />解除
                </MudButton>
            }
            else
            {
                <MudButton Disabled=!this.monster.cardLoaded Variant="Variant.Outlined" Size="Size.Small" Color="Color.Warning"
                           @onclick="ShowStateDialog">
                    <AttackIcon AttackType="BattleCardAttackType.BattleState" />
                </MudButton>
            }

            <MudButton Disabled=!this.monster.cardLoaded Variant="Variant.Outlined" Size="Size.Small" Color="Color.Secondary"
                       @onclick="ShowTransformDialog">
                <AttackIcon AttackType="BattleCardAttackType.Transform" />
            </MudButton>

            @if (this.monster.Source.SpecialAttackAttached)
            {
                <MudButton Disabled=!this.monster.cardLoaded Variant="Variant.Outlined" Size="Size.Small" Color="Color.Secondary"
                           @onclick="this.monster.Source.DettacheSpecial">
                    <AttackIcon AttackType="BattleCardAttackType.Special" />解除
                </MudButton>
            }
            else
            {
                <MudButton Disabled=!this.monster.cardLoaded Variant="Variant.Outlined" Size="Size.Small" Color="Color.Secondary"
                           @onclick="ShowSpecialDialog">
                    <AttackIcon AttackType="BattleCardAttackType.Special" />
                </MudButton>
            }
        </MudButtonGroup>

        <div class="d-flex justify-center align-center gap-1">
            バフ:
            <MudIconButton Disabled=!this.monster.cardLoaded Icon="@Icons.Material.Filled.KeyboardDoubleArrowUp" Variant="Variant.Filled"
                           Color="Color.Success" Size="Size.Small" @onclick="this.Buff" />
            <MudIconButton Disabled=!this.monster.cardLoaded Icon="@Icons.Material.Filled.KeyboardDoubleArrowDown" Variant="Variant.Filled"
                           Color="Color.Secondary" Size="Size.Small" @onclick="this.Debuff" />
        </div>
    </MudContainer>
</MudPaper>

<MudPaper Outlined="true">
    <MudContainer>
        <div class="d-flex align-center justify-start">
            <MudText Class="overflow-hidden" Typo="Typo.h5">@monster.Source.Def.Name</MudText>
        </div>
        <div class="d-flex align-center justify-start gap-1 mb-4">
            <MudText Typo="Typo.body1" Class="mr-5">HP: </MudText>
            <MudProgressLinear Class="mr-5" Value="@monster.Source.CurrentHp" Min="0" Max="@monster.Source.Def.Hp" Color="Color.Success" Size="Size.Large">
                <MudText Typo="Typo.h5" Color="Color.Dark" Style="-webkit-text-stroke: 1px #FFF;">
                    <b>@monster.Source.CurrentHp / @monster.Source.Def.Hp</b>
                </MudText>
            </MudProgressLinear>
            <MudIconButton Icon="@Icons.Material.Filled.Add" Variant="Variant.Filled" Color="Color.Success" Size="Size.Small"
                           @onclick="AddHp" />
            <MudIconButton Icon="@Icons.Material.Filled.Remove" Variant="Variant.Filled" Color="Color.Error" Size="Size.Small"
                           @onclick="SubHp" />
        </div>

        <MudContainer Class="d-flex justify-center mb-3">
            <MudPaper Outlined="false" Square="true" Elevation="0"
                      Height=@($"{@Config.ImageSize.Y}rem") Width="100%"
                      Class="d-flex justify-center">
                <MudImage id=@cardImageElementId Class="@(monster.Source.IsAlive ? "" : "monochrome")"
                          ObjectFit="ObjectFit.Contain" ObjectPosition="ObjectPosition.Center" Fluid="true" />
            </MudPaper>
        </MudContainer>

        <MudContainer Class="d-flex justify-center gap-4 mb-3">
            <MudText Typo="Typo.body1">
                状態: <MudText Inline="true" Typo="Typo.body1"
                             Color="@(this.monster.Source.BattleStateAttached ? Color.Warning : Color.Default)">
                    @this.monster.Source.BattleStateName
                </MudText>
            </MudText>
            <MudText Typo="Typo.body1">
                バフ: <MudText Inline="true" Typo="Typo.body1"
                             Color="@(this.monster.Source.DiffValue== 0 ? Color.Default : (this.monster.Source.DiffValue > 0 ? Color.Success : Color.Error))">
                    @($"{this.monster.Source.DiffValue:+#;-#;0}")
                </MudText>
            </MudText>
        </MudContainer>


        <MudTabs PanelClass="pt-2">
            <MudTabPanel Text="@this.monster.actionName" Icon="fas fa-hand-rock">
                @foreach (var attack in this.monster.Attacks)
                {
                    <MudPaper Outlined="true" Class="@($"{(attack.IsSelected ? "mud-primary" : "")} pa-2 mb-2")">
                        <MudGrid Justify="Justify.FlexStart" Class="align-center">
                            <MudItem sm="1">
                                <AttackIcon AttackType="@attack.Source.Type" />
                            </MudItem>

                            @if (this.monster.Source.SpecialAttackAttached)
                            {
                                // 必殺
                                <MudItem sm="4">
                                    <MudTooltip Text="@attack.Source.Name">
                                        <MudText Class="overflow-hidden"
                                                 Style=@($"height: 1.6rem;font-size: clamp(12px, {10f / Math.Max(1, attack.Source.Name.Length)}rem, 20px)")>
                                            @attack.Source.Name
                                        </MudText>
                                    </MudTooltip>
                                </MudItem>
                                <MudItem sm="7">
                                    <MudTooltip>
                                        <ChildContent>
                                            <MudText Class="overflow-hidden"
                                                     Style=@($"height: 1.6rem;font-size: clamp(12px, {8f / Math.Max(1, 1)}rem, 15px)")>
                                                <AttackDescription Attack="@attack.Source.GetAttack().Item1" DiffValue="@attack.Source.GetAttack().Item2" />
                                            </MudText>
                                        </ChildContent>
                                        <TooltipContent>
                                            <AttackDescription Attack="@attack.Source.GetAttack().Item1" DiffValue="@attack.Source.GetAttack().Item2" />
                                        </TooltipContent>
                                    </MudTooltip>
                                </MudItem>
                            }
                            else
                            {
                                // 名前と説明欄
                                @if (attack.Source.Type == BattleCardAttackType.Transform
                               || attack.Source.Type == BattleCardAttackType.Special)
                                {
                                    // 必殺と変身マス
                                    <MudItem sm="8" Style="text-align: center">
                                        <MudTooltip>
                                            <ChildContent>
                                                <MudText Class="overflow-hidden"
                                                         Style=@($"height: 1.6rem;font-size: clamp(12px, {15f / Math.Max(1, 1)}rem, 20px)")
                                                         Align="Align.Center">
                                                    <AttackDescription Attack="@attack.Source.GetAttack().Item1" DiffValue="@attack.Source.GetAttack().Item2" />
                                                </MudText>
                                            </ChildContent>
                                            <TooltipContent>
                                                <AttackDescription Attack="@attack.Source.GetAttack().Item1" DiffValue="@attack.Source.GetAttack().Item2" />
                                            </TooltipContent>
                                        </MudTooltip>
                                    </MudItem>
                                }
                                else
                                {
                                    // 必殺と変身マス以外
                                    <MudItem sm="4">
                                        <MudTooltip>
                                            <ChildContent>
                                                <MudText Class="overflow-hidden"
                                                         Style=@($"height: 1.6rem;font-size: clamp(12px, {10f / Math.Max(1, attack.Source.Name.Length)}rem, 20px)")>
                                                    @attack.Source.Name
                                                </MudText>
                                            </ChildContent>
                                            <TooltipContent>
                                                @attack.Source.Name
                                            </TooltipContent>
                                        </MudTooltip>
                                    </MudItem>
                                    <MudItem sm="4">
                                        <MudTooltip>
                                            <ChildContent>
                                                <MudText Class="overflow-hidden"
                                                         Style=@($"height: 1.6rem;font-size: clamp(12px, {8f / Math.Max(1, 1)}rem, 15px)")>
                                                    <AttackDescription Attack="@attack.Source.GetAttack().Item1" DiffValue="@attack.Source.GetAttack().Item2" />
                                                </MudText>
                                            </ChildContent>
                                            <TooltipContent>
                                                <AttackDescription Attack="@attack.Source.GetAttack().Item1" DiffValue="@attack.Source.GetAttack().Item2" />
                                            </TooltipContent>
                                        </MudTooltip>
                                    </MudItem>
                                }

                                        // 状態異常欄
                                <MudItem sm="3">
                                    <MudTooltip>
                                        <ChildContent>
                                            <div class="d-flex gap-2">
                                                <MudDivider Vertical="true" FlexItem="true" />
                                                <MudText Class="overflow-hidden"
                                                         Style=@($"height: 1.6rem;font-size: clamp(12px, {7f / Math.Max(1, 1)}rem, 15px)")>
                                                    <AttackDescription Attack="@attack.Source.GetStatusAttack().Item1" DiffValue="@attack.Source.GetStatusAttack().Item2" />
                                                </MudText>
                                            </div>
                                        </ChildContent>
                                        <TooltipContent>
                                            <AttackDescription Attack="@attack.Source.GetStatusAttack().Item1" DiffValue="@attack.Source.GetStatusAttack().Item2" />
                                        </TooltipContent>
                                    </MudTooltip>
                                </MudItem>
                            }
                        </MudGrid>
                    </MudPaper>
                }
            </MudTabPanel>
            <MudTabPanel Text="フレーバーテキスト" Icon="@Icons.Material.Filled.ShortText">
                <MudText Class="overflow-hidden" Typo="Typo.subtitle1">@monster.Source.FlavorText</MudText>
            </MudTabPanel>
        </MudTabs>
    </MudContainer>
</MudPaper>

<FileUploader @ref=fileUpload />
<FileDownloader @ref=fileDownload />
<AudioPlayer @ref=audioPlayer />

<script>
    window.doMonsterHitEffect = async (elementId) => {
        const shaker = document.getElementById(elementId);
        shaker.classList.add("hit");

        // sleep
        await new Promise((resolve) => setTimeout(resolve, 100));

        shaker.classList.remove("hit");
    };
</script>

@code {
    class MonsterVM
    {
        public MonsterStateMachine Source { get; set; }

        public BattleCardAttackVM[] Attacks { get; private set; }

        public MonsterVM(MonsterStateMachine source)
        {
            this.Source = source;
            this.Attacks = source.Attacks.Select(a => new BattleCardAttackVM(a)).ToArray();
        }

        public bool cardLoaded => this.Source.Attacks.Any();
        public string actionName => this.Source.SpecialAttackAttached ? $"必殺: {this.Source.SpecialName}" : "たたかう";
    }

    class BattleCardAttackVM
    {
        public BattleCardAttackStateMachine Source { get; set; }
        public bool IsSelected { get; set; }

        public BattleCardAttackVM(BattleCardAttackStateMachine source)
        {
            Source = source;
            IsSelected = false;
        }
    }

    public record TransformSelectItem(Monster? Monster, BattleCard? owner)
    {
        public string DisplayString => Monster == null ? "なし" : $"{Monster.Name}({owner?.Main.Name})";
    }
    public record BattleStateSelectItem(BattleState? BattleState, BattleCard? owner)
    {
        public string DisplayString => BattleState == null ? "なし" : $"{BattleState.Name}({owner?.Main.Name})";
    }
    public record SpecialAttackSelectItem(SpecialAttack? SpecialAttack, BattleCard? owner)
    {
        public string DisplayString => SpecialAttack == null ? "なし" : $"{SpecialAttack.Name}({owner?.Main.Name})";
    }
}

@code {
    public (BattleCard? Card, Dictionary<string, byte[]> ImagesByName) My = (null, []);

    public (BattleCard? Card, Dictionary<string, byte[]> ImagesByName) Enemy = (null, []);

#pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
    FileUploader fileUpload;
    FileDownloader fileDownload;
    AudioPlayer audioPlayer;
#pragma warning restore CS8618

    private MonsterVM monster = new MonsterVM(new(new()
        {
            Name = "",
            Hp = 0,
            FlavorText = "",
            ImageFileName = "",
            Attacks = [],
        })
        {
            CurrentHp = 0
        });

    private readonly string cardImageElementId = Guid.NewGuid().ToString();

    private IReadOnlyList<TransformSelectItem> Transforms =>
        (this.My.Card == null ? [] : new[] { new TransformSelectItem(this.My.Card.Main, this.My.Card) })
        .Concat(this.My.Card?.Transforms?.Select(t => new TransformSelectItem(t, this.My.Card))?.ToArray() ?? [])
        .Concat((this.Enemy.Card == null ? [] : new[] { new TransformSelectItem(this.Enemy.Card.Main, this.Enemy.Card) }))
        .Concat(this.Enemy.Card?.Transforms?.Select(t => new TransformSelectItem(t, this.Enemy.Card))?.ToArray() ?? [])
        .ToArray();

    private IReadOnlyList<BattleStateSelectItem?> BattleStates => new[] { new BattleStateSelectItem(null, null) }
        .Concat(this.My.Card?.BattleStates?.Select(t => new BattleStateSelectItem(t, this.My.Card))?.ToArray() ?? [])
        .Concat(this.Enemy.Card?.BattleStates?.Select(t => new BattleStateSelectItem(t, this.Enemy.Card))?.ToArray() ?? [])
        .ToArray();

    private IReadOnlyList<SpecialAttackSelectItem?> Specials => new[] { new SpecialAttackSelectItem(null, null) }
        .Concat(this.My.Card?.SpecialAttacks?.Select(t => new SpecialAttackSelectItem(t, this.My.Card))?.ToArray() ?? [])
        .Concat(this.Enemy.Card?.SpecialAttacks?.Select(t => new SpecialAttackSelectItem(t, this.Enemy.Card))?.ToArray() ?? [])
        .ToArray();

    public async Task LoadMyCard(BattleCard card, Dictionary<string, byte[]> imagesByName)
    {
        this.My.Card = card;
        this.My.ImagesByName = imagesByName;

        this.monster = new MonsterVM(new(card.Main));
        StateHasChanged();

        await this.RefreshImage();
    }

    public void LoadEnemyCard(BattleCard card, Dictionary<string, byte[]> imagesByName)
    {
        this.Enemy.Card = card;
        this.Enemy.ImagesByName = imagesByName;
    }

    private async Task Transform(Monster transform)
    {
        this.monster = monster == null ? new(new(transform)) : new(new(transform, this.monster.Source));
        await this.RefreshImage();
    }

    private async Task RefreshImage()
    {
        var imageBytes = this.My.ImagesByName.TryGetValue(monster.Source.Def.ImageFileName, out var bytes) ? bytes : [];
        if (imageBytes.Length != 0)
        {
            await this.fileUpload.SetImage(cardImageElementId, new MemoryStream(imageBytes));
            return;
        }
        imageBytes = this.Enemy.ImagesByName.TryGetValue(monster.Source.Def.ImageFileName, out bytes) ? bytes : [];
        if (imageBytes.Length != 0)
        {
            await this.fileUpload.SetImage(cardImageElementId, new MemoryStream(imageBytes));
            return;
        }
    }

    private async Task ShowStateDialog()
    {
        var parameters = new DialogParameters<SimpleChoiceDialog<BattleStateSelectItem>>(){
            { x => x.ChoiceItems, BattleStates },
            { x => x.ItemToString, new Func<BattleStateSelectItem?, string>(x => x?.DisplayString ?? "") }
        };

        var dialog = await DialogService.ShowAsync<SimpleChoiceDialog<BattleStateSelectItem>>("状態", parameters);
        var result = await dialog.Result;

        if (!(result?.Canceled ?? true))
        {
            var selectedValue = result.Data as BattleStateSelectItem;
            if (selectedValue?.BattleState == null)
            {
                this.monster.Source.DettacheBattleState();
            }
            else
            {
                this.monster.Source.AttacheBattleState(selectedValue.BattleState);
            }
        }
    }

    private async Task ShowSpecialDialog()
    {
        var parameters = new DialogParameters<SimpleChoiceDialog<SpecialAttackSelectItem>>(){
            { x => x.ChoiceItems, Specials },
            { x => x.ItemToString, new Func<SpecialAttackSelectItem?, string>(x => x?.DisplayString ?? "") }
        };

        var dialog = await DialogService.ShowAsync<SimpleChoiceDialog<SpecialAttackSelectItem>>("必殺", parameters);
        var result = await dialog.Result;

        if (!(result?.Canceled ?? true))
        {
            var selectedValue = result.Data as SpecialAttackSelectItem;
            if (selectedValue?.SpecialAttack == null)
            {
                this.monster.Source.DettacheSpecial();
            }
            else
            {
                this.monster.Source.AttacheSpecial(selectedValue.SpecialAttack);
            }
        }
    }

    private async Task ShowTransformDialog()
    {
        var parameters = new DialogParameters<SimpleChoiceDialog<TransformSelectItem>>(){
            { x => x.ChoiceItems, Transforms },
            { x => x.ItemToString, new Func<TransformSelectItem?, string>(x => x?.DisplayString ?? "") }
        };

        var dialog = await DialogService.ShowAsync<SimpleChoiceDialog<TransformSelectItem>>("変身", parameters);
        var result = await dialog.Result;

        if (!(result?.Canceled ?? true))
        {
            var selectedValue = result.Data as TransformSelectItem;
            if (selectedValue?.Monster != null)
            {
                await this.Transform(selectedValue.Monster);
            }
        }
    }

    private async Task AddHp()
    {
        var v = this.monster.Source.AddHp();
        if (v > 0)
        {
            await this.audioPlayer.Play(AudioSrc.Heal);
        }
    }

    private async Task SubHp()
    {
        var v = this.monster.Source.SubHp();
        if (v > 0)
        {
            if (this.monster.Source.IsAlive)
            {
                await this.audioPlayer.Play(AudioSrc.Damage);
                await JS.InvokeVoidAsync("doMonsterHitEffect", cardImageElementId);
            }
            else
            {
                await this.audioPlayer.Play(AudioSrc.Death);
            }
        }
    }

    private async Task Buff()
    {
        this.monster.Source.Buff();
        await this.audioPlayer.Play(AudioSrc.Buff);
    }

    private async Task Debuff()
    {
        this.monster.Source.Debuff();
        await this.audioPlayer.Play(AudioSrc.Buff);
    }

    private async Task Attack()
    {
        foreach (var a in this.monster.Attacks)
        {
            a.IsSelected = false;
        }

        var nextAttackIndex = this.monster.Source.NextAttackIndex();

        foreach (var i in Enumerable.Range(0, 3))
        {
            foreach (var j in Enumerable.Range(0, this.monster.Source.Attacks.Length))
            {
                if (j == 0)
                {
                    this.monster.Attacks[^1].IsSelected = false;
                }
                else
                {
                    this.monster.Attacks[j - 1].IsSelected = false;
                }
                this.monster.Attacks[j].IsSelected = true;

                StateHasChanged();
                await this.audioPlayer.Play(AudioSrc.ActionRoulette);
                await Task.Delay(TimeSpan.FromSeconds(0.1));
            }
        }

        this.monster.Attacks[^1].IsSelected = false;

        StateHasChanged();
        await Task.Delay(TimeSpan.FromSeconds(0.5));
        this.monster.Attacks[nextAttackIndex].IsSelected = true;
        await this.audioPlayer.Play(AudioSrc.Action);
    }
}
