@using System.Text.RegularExpressions
@using MonsterTournament.Models
@using System.IO.Compression
@using System.Text.Json

<div class="d-flex justify-start align-center gap-1 mb-5">
    <MudButton StartIcon="@Icons.Material.Filled.Add" Variant="Variant.Filled" Color="Color.Primary"
               @onclick=AddNew>追加</MudButton>
</div>

<MudGrid Justify="Justify.Center" Spacing="10">
    <MudItem xs="12" lg="3">
        <MudPaper MinWidth="300px">
            <MudList T="BattleState" @bind-SelectedValue=selectedBattleState>
                @foreach (var state in BattleStates)
                {
                    <MudListItem Text="@state.Name" IconColor="Color.Warning" Icon="fas fa-water" Value="@state" />
                }
            </MudList>
        </MudPaper>
    </MudItem>

    <MudItem xs="12" lg="9">
        @if (selectedBattleState != null)
        {
            <MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">
                <MudTextField T="string" Class="mb-5" Label="名前" Required="true"
                              @bind-Text=selectedBattleState.Name RequiredError="name is required!" />

                @foreach (var i in Enumerable.Range(0, selectedBattleState.Attacks.Length))
                {
                    <InputAttackField i="@i" battleCardAttack=selectedBattleState.Attacks[i] requireName="false" />
                }
            </MudForm>
        }
    </MudItem>
</MudGrid>

@code {
    [Parameter]
    public List<BattleState> BattleStates { get; set; } = [];

    public BattleState? selectedBattleState;

#pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
    MudForm form;
#pragma warning restore CS8618

    bool success;
    string[] errors = { };

    private void AddNew()
    {
        selectedBattleState = new BattleState
            {
                Name = "新規の状態異常",
                Attacks = Enumerable.Range(1, 6).Select(i => new BattleCardAttack()).ToArray()
            };
        BattleStates.Add(selectedBattleState);
    }
}
