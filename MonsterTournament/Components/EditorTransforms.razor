@using System.Text.RegularExpressions
@using MonsterTournament.Models
@using System.IO.Compression
@using System.Text.Json

<div class="d-flex justify-start align-center gap-1 mb-5">
    <MudButton StartIcon="@Icons.Material.Filled.Add" Variant="Variant.Filled" Color="Color.Primary"
               @onclick=AddNew>追加</MudButton>
</div>

<MudGrid Justify="Justify.Center" Spacing="10">
    <MudItem xs="12" lg="3">
        <MudPaper MinWidth="300px">
            <MudList T="MonsterWithImage" @bind-SelectedValue=selectedTransform>
                @foreach (var state in Transforms)
                {
                    <MudListItem Value="@state">
                        <AvatarContent>
                            <AttackIcon AttackType="@BattleCardAttackType.Transform" />
                        </AvatarContent>
                        <ChildContent>
                            <div class="d-flex justify-space-between align-center">
                                @state.Transform.Name
                                <MudIconButton Icon="fas fa-trash" Variant="Variant.Filled" Color="Color.Error"
                                               @onclick="() => Remove(state)" />
                            </div>
                        </ChildContent>
                    </MudListItem>
                }
            </MudList>
        </MudPaper>
    </MudItem>

    <MudItem xs="12" lg="9">
        @if (selectedTransform != null)
        {
            <EditorMonster Monster="selectedTransform.Transform" @bind-ImageBytes="selectedTransform.ImageBytes" />
        }
    </MudItem>
</MudGrid>

@code {
    public class MonsterWithImage
    {
        public Monster Transform { get; set; } = new()
            {
                Name = "新規の変身",
                Attacks = Enumerable.Range(1, 6).Select(i => new BattleCardAttack()).ToArray()
            };
        public byte[] ImageBytes { get; set; } = [];
    }

    [Parameter]
    public List<MonsterWithImage> Transforms { get; set; } = new();

    public MonsterWithImage? selectedTransform;

    private void AddNew()
    {
        selectedTransform = new();
        Transforms.Add(selectedTransform);
    }

    private void Remove(MonsterWithImage value)
    {
        Transforms.Remove(value);
        if (value == selectedTransform)
        {
            selectedTransform = default;
        }
    }
}
