@page "/editor"
@using System.Text.RegularExpressions
@using System.IO.Compression
@using System.Text.Json
@using MonsterTournament.Components
@using MonsterTournament.Models
@using static MonsterTournament.Components.EditorTransforms
@inject IJSRuntime JS

<PageTitle>エディター - モンスタートーナメント</PageTitle>

<div class="d-flex justify-start align-center gap-1 mb-5">
    <MudFileUpload T="IBrowserFile" FilesChanged="LoadCard" Accept=@BattleCardLoader.FileExtension Class="mr-5">
        <ActivatorContent>
            <MudButton StartIcon="@Icons.Material.Filled.FileOpen" Variant="Variant.Filled"
                       Color="Color.Primary">開く</MudButton>
        </ActivatorContent>
    </MudFileUpload>
    <MudButton StartIcon="@Icons.Material.Filled.Download" Variant="Variant.Filled" Color="Color.Primary"
               Disabled="@(!success)" @onclick=Download>ダウンロード</MudButton>
</div>

<MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6">
    <MudTabPanel Text="モンスター">
        <EditorMonster @ref=editorMonster Monster="battleCard.Main" @bind-ImageBytes="mainImage"
                       TransformNames="@transformNames" BattleStateNames="@battleStateNames" SpecialAttackNames="@specialAttackNames" />
    </MudTabPanel>
    <MudTabPanel Text="変身">
        <EditorTransforms Transforms="transformWithImages" />
    </MudTabPanel>
    <MudTabPanel Text="必殺技">
        <EditorSpecialAttack SpecialAttacks="battleCard.SpecialAttacks" />
    </MudTabPanel>
    <MudTabPanel Text="状態異常">
        <EditorBattleState BattleStates="battleCard.BattleStates" />
    </MudTabPanel>
</MudTabs>

<FileDownloader @ref=fileDownload />

@code {
#pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
    FileDownloader fileDownload;
    EditorMonster editorMonster;
#pragma warning restore CS8618

    bool success = true;

    private BattleCard battleCard = new BattleCard()
        {
            Main = new()
            {
                Name = "新規のモンスター",
                Hp = 0,
                Attacks = Enumerable.Range(1, 6).Select(i => new BattleCardAttack()).ToArray()
            }
        };

    private byte[] mainImage = [];

    private List<MonsterWithImage> transformWithImages = [];

    private string[] transformNames => this.transformWithImages.Select(t => t.Transform.Name).ToArray();
    private string[] battleStateNames => this.battleCard.BattleStates.Select(t => t.Name).ToArray();
    private string[] specialAttackNames => this.battleCard.SpecialAttacks.Select(t => t.Name).ToArray();

    private async Task LoadCard(IBrowserFile file)
    {
        if (file == null)
        {
            Console.WriteLine("キャンセル");
            return;
        }

        var buffer = new byte[file.Size];
        using var fileStream = file.OpenReadStream(Config.MaxCardFileSizeInBytes);
        await fileStream.ReadAsync(buffer);

        var (cardOrNull, imagesByName) = await new BattleCardLoader().Load(buffer);

        if (cardOrNull == null)
        {
            //TODO : カードの読み込みに失敗 error handling
            Console.WriteLine("カードの読み込みに失敗");
            return;
        }

        battleCard = cardOrNull;
        mainImage = imagesByName.TryGetValue(battleCard.Main.ImageFileName, out var bytes) ? bytes : [];
        transformWithImages = cardOrNull.Transforms.Select(t => new MonsterWithImage
            {
                Transform = t,
                ImageBytes = imagesByName.TryGetValue(t.ImageFileName, out var b) ? b : []
            })
            .ToList();

        await this.editorMonster.UpdateImage(mainImage);
    }

    private async Task Download()
    {
        var imagesByName = new Dictionary<string, byte[]>
        {
            {battleCard.Main.ImageFileName, mainImage}
        };

        battleCard.Transforms.Clear();
        foreach (var t in transformWithImages)
        {
            battleCard.Transforms.Add(t.Transform);
            imagesByName[t.Transform.ImageFileName] = t.ImageBytes;
        }

        var file = await new BattleCardLoader().Save(battleCard, imagesByName);
        await fileDownload.DownloadFileFromStream(file.FileName, new MemoryStream(file.Bytes));
    }
}